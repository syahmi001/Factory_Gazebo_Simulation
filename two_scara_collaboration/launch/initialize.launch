<?xml version="1.0" encoding="utf-8"?>
<launch>

  <!-- put file path of urdf model in parameter server, for the cylinder spawner node -->
  <!-- more details at launch file of swarm robot simulation -->
  <param name="red_cylinder_path" type="str" value="$(find two_scara_collaboration)/urdf/red_cylinder.urdf"/>
  <param name="blue_cylinder_path" type="str" value="$(find two_scara_collaboration)/urdf/blue_cylinder.urdf"/>

  <!-- initialize gazebo with a world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find two_scara_collaboration)/launch/empty_house.world"/>
    <arg name="gui" value="true" />
    <arg name="paused" value="true"/>
    <arg name="use_sim_time" value="true"/>
  </include>
  <!-- gazebo has to be paused when starts up -->
  <!-- because roslaunch doesn't guarantee serial running of each node -->
  <!-- in this case, two scara will hit each other and swing back and forth -->

  
  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find two_scara_collaboration)/urdf/pole.xacro'" />

  <param name="robot_description2"
    command="$(find xacro)/xacro --inorder '$(find two_scara_collaboration)/urdf/pole2.xacro'" />

  <!-- spawn the conveyor_belt in gazebo -->
  <node name="spawn_conveyor_belt" pkg="gazebo_ros" type="spawn_model" args="-file $(find two_scara_collaboration)/urdf/conveyor_belt.urdf -urdf -model conveyor_belt" />

  <!-- spawn the right scara robot in gazebo -->
  <node name="spawn_scara_robot_right" pkg="gazebo_ros" type="spawn_model" args="-file $(find two_scara_collaboration)/urdf/scara_robot_right.urdf -urdf -model scara_robot_right
    -y -1.5
    -x -3.0
    -J scara_robot_right::rotation1 -0.78
    -J scara_robot_right::rotation2 2.1" />

  <!-- spawn the left scara robot in gazebo -->
  <node name="spawn_scara_robot_left" pkg="gazebo_ros" type="spawn_model" args="-file $(find two_scara_collaboration)/urdf/scara_robot_left.urdf -urdf -model scara_robot_left
    -y 1.5
    -x 1.0
    -J scara_robot_left::rotation1 -0.78
    -J scara_robot_left::rotation2 2.1" />

    
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model pole -param robot_description -x 3.0 -y 2.0"/>

  <node name="urdf_spawner2" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model pole2 -param robot_description2 -x -1.0 -y 2.0"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <!-- <param name="robot_description1"
    command="$(find xacro)/xacro inorder '$(find delta_robot_description)/urdf/robot.xacro'" /> -->

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <!-- <node name="urdf_spawner1" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model robot -param robot_description1 -x 3.0 -y 3.0"/> -->

  <!-- pole with camera -->
  <!-- <node name="pole" pkg="gazebo_ros" type="spawn_model" args="-file $(find two_scara_collaboration)/urdf/pole.urdf -urdf -model pole
    -y 2.0"/> -->


  <!-- the cylinder blocks spawner node -->
  <node name="cylinder_blocks_spawner" pkg="two_scara_collaboration" type="cylinder_blocks_spawner" output="screen" />

  <!-- the cylinder poses publisher node -->
  <node name="cylinder_blocks_poses_publisher" pkg="two_scara_collaboration" type="cylinder_blocks_poses_publisher" output="screen" />

  <!-- the gripper control action server node -->
  <node name="scara_gripper_action_server" pkg="two_scara_collaboration" type="scara_gripper_action_server" output="log" />

  <!-- the scara robot joint controller node -->
  <node name="scara_joint_controller" pkg="two_scara_collaboration" type="scara_joint_controller" output="log" />

  <!-- the cylinder active pool maintainer node -->
  <node name="cylinder_active_pool" pkg="two_scara_collaboration" type="cylinder_active_pool" output="screen" />

  <!-- the maintainer for scara upper boundary topics -->
  <node name="scara_upper_boundary_maintainer" pkg="two_scara_collaboration" type="scara_upper_boundary_maintainer" output="log" />

<!-- run controller script -->
  <node pkg="two_scara_collaboration" type="start.sh" name="start" args="-file $(find two_scara_collaboration)/launch/start.sh" output="screen"/>



  <!-- for ros control to be used with scara robot -->
<!--   <param name="/scara_robot_left/robot_description" textfile="$(find two_scara_collaboration)/urdf/scara_robot_left.urdf" /> -->



</launch>